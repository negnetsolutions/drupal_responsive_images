// Responsive Image Loader 2.0
// Negnet Solutions 2014
// GPL Licensed

(function ($, undefined) {

  var responsive_images = function(){
    var timer;

    var _ = this;

    this.getBestSource = function( requirements, srcset ){
      var urlRegex = '[-a-zA-Z0-9@:%_â€“+.~#?&//=]*';
      var imageFragmentRegex = '\\s*(' + urlRegex + ')\\s*([0-9xwh.\\s]*)';
      var srcsetRegex = '(' + imageFragmentRegex + ',?)+';

      var IMAGE_FRAGMENT_REGEXP = new RegExp(imageFragmentRegex);
      var SRCSET_REGEXP = new RegExp(srcsetRegex);

      var s = this;

      this.candidates = new Array();

      this.addCandidate = function(candidate){
        s.candidates.push(candidate);
      }
      this.removeCandidatesIf = function(candidates, criteria){
        for( var i = candidates.length - 1; i >= 0; i--){
          var candidate = candidates[i];
          if( criteria(candidate) ){
            candidates.splice(i,1);
          }
        }
        return candidates;
      }
      this.getBestCandidateIf = function(candidates, criteria){
        var bestCandidate = candidates[0];

        for (var i = 0; i < candidates.length; i++) {
          var candidate = candidates[i];
          if (criteria(candidate, bestCandidate)) {
            bestCandidate = candidate;
          }
        }

        return bestCandidate;
      }

      this.getCandidates = function(srcset){

        var sources = srcset.split(',');
        for(var i = 0; i < sources.length; i++){
          var source = sources[i];
          var match = source.match(IMAGE_FRAGMENT_REGEXP);
          var desc = s.parseDesc(match[2]);

          var candidate = {
            src: match[1],
            w: desc.w,
            index: i
          };

          s.addCandidate( candidate );
        }
      }

      this.parseDesc = function(desc){
        var descriptors = desc.split(/\s/);
        var out = {};
        for (var i = 0; i < descriptors.length; i++) {
          var desc = descriptors[i];
          if (desc.length > 0) {
            var lastChar = desc.substr(desc.length - 1);
            var value = desc.substring(0, desc.length-1);
            var intVal = parseInt(value, 10);
            if (lastChar === 'w') {
              out[lastChar] = intVal;
            }
          }
        }
        return out;
      }

      //load the Candidates
      this.getCandidates(srcset);

      this.getBestCandidate = function(){

        var candidates = s.candidates.slice(0);

        //remove all candidates with widths less than requirements
        candidates = s.removeCandidatesIf( candidates, function(a) { return a.w < requirements.w; } );

        if( candidates.length == 0 ){
          //all images are too small. Return largest one
          return s.getBestCandidateIf( s.candidates, function(a,b) { return a.w > b.w; } );
        }

        //return candidate with smallest width
        return s.getBestCandidateIf( candidates, function(a, b) { return a.w < b.w; } );
      }

      var bestCandidate = this.getBestCandidate();

      try {
        bestCandidate.lowerLimit = s.candidates[bestCandidate.index - 1].w;
        bestCandidate.upperLimit = s.candidates[bestCandidate.index + 1].w;
      }
      finally {
        return bestCandidate;
      }
    }

    this.setup = function() {

      if( _.isSizingImplemented() == true ){
        return false;
      }

      _.loadResponsiveImages();

      _.bindResponsiveImages();

      $(window).bind('resize', function(){
        timer && clearTimeout(timer);
        timer = setTimeout(_.loadResponsiveImages, 200);
      });

    }

    this.bindResponsiveImages = function(selector){

      //unbind anything there, so we can re-bind
      $('.responsive-image img',selector).unbind('load');

      $('.responsive-image img',selector).bind('load', function() {
        _.loadResponsiveImage($(this).parent());
      });

    }

    window.rebindResponsiveImages = function(selector){

      if( _.isSizingImplemented() == true ){
        return false;
      }

      _.bindResponsiveImages(selector);
      _.loadResponsiveImage(selector);
    }

    this.isHighDensity = function(){
      return ((window.matchMedia && (window.matchMedia('only screen and (min-resolution: 124dpx), only screen and (min-resolution: 1.3dppx), only screen and (min-resolution: 48.8dppx)').matches || window.matchMedia('only screen and (-webkit-min-device-pixel-ratio: 1.3), only screen and (-o-min-device-pixel-ratio: 2.6/2), only screen and (min--moz-device-pixel-ratio: 1.3), only screen and (min-device-pixel-ratio: 1.3)').matches)) || (window.devicePixelRatio && window.devicePixelRatio > 1.3));
    }

    this.loadResponsiveImage = function(image){

      if( typeof(image) == 'undefined' ){
        return;
      }

      var requirements = {
        w: ($(image).parent().width() <= 0) ? $(window).width() : $(image).parent().width()
      };

      //detect if high density display. Multiply requirement by 1.5
      if(_.isHighDensity()){
        requirements.w = requirements.w * 1.5;
      }

      var upperLimit = ($(image).data('upperLimit')) ? $(image).data('upperLimit') : 0;
      var lowerLimit = ($(image).data('lowerLimit')) ? $(image).data('lowerLimit') : 0;

      if( requirements.w > lowerLimit && requirements.w < upperLimit ){
        return;
      }

      //setup srcset into data attribute and remove srcset to force overwrite of browser defaults
      if( !$('img',image).attr('data-compat_srcset') ) {
        $('img',image).attr('data-compat_srcset', $('img',image).attr('srcset'));
        $('img',image).attr('srcset','');
      }
      var srcset = $('img',image).attr('data-compat_srcset');

      if (srcset) {

        var bestCandidate = _.getBestSource(requirements, srcset);

        if( $('img',image).attr('src') != bestCandidate.src ){
          //change our image source to the best fit
          $('img',image).attr("src",bestCandidate.src);
          $(image).data('upperLimit',(bestCandidate.upperLimit) ? bestCandidate.upperLimit : Infinity);
          $(image).data('lowerLimit',(bestCandidate.lowerLimit) ? bestCandidate.lowerLimit : 0);
        }

      }
    }
    this._loadResponsiveImages = function(){
      $('.responsive-image').each(function(){
        _.loadResponsiveImage(this);
      });
    }

    this.loadResponsiveImages = function(){
      try {
        window.requestAnimationFrame( _._loadResponsiveImages() );
      }
      catch( err ){
        //fallback if requestanimationframe is unavailable
        _._loadResponsiveImages();
      }
    }

    this.isSizingImplemented = function() {
      var img = new Image();
      return img.sizes !== undefined;
    }

    _.setup();
  }

  $(document).ready(function() {
    var rs = new responsive_images();
  });

}(jQuery));
