// Responsive Image Loader 2.1
// Negnet Solutions 2014
// GPL Licensed

(function ($, undefined) {

  $(document).ready(function() {
    var responsive_images = function(){
        this._ = this,
        this.w = $(window),
        this.windowWidth = $(window).width(),
        this.windowIsHighDensity = false,
        this.timer;

      this.getBestSource = function( requirements, srcset ){
        var urlRegex = '[-a-zA-Z0-9@:%_â€“+.~#?&//=]*';
        var imageFragmentRegex = '\\s*(' + urlRegex + ')\\s*([0-9xwh.\\s]*)';
        var srcsetRegex = '(' + imageFragmentRegex + ',?)+';

        var IMAGE_FRAGMENT_REGEXP = new RegExp(imageFragmentRegex);
        var SRCSET_REGEXP = new RegExp(srcsetRegex);

        var s = this;

        this.candidates = new Array();

        this.addCandidate = function(candidate){
          s.candidates.push(candidate);
        }
        this.removeCandidatesIf = function(candidates, criteria){
          for( var i = candidates.length - 1; i >= 0; i--){
            var candidate = candidates[i];
            if( criteria(candidate) ){
              candidates.splice(i,1);
            }
          }
          return candidates;
        }
        this.getBestCandidateIf = function(candidates, criteria){
          var bestCandidate = candidates[0];

          for (var i = 0; i < candidates.length; i++) {
            var candidate = candidates[i];
            if (criteria(candidate, bestCandidate)) {
              bestCandidate = candidate;
            }
          }

          return bestCandidate;
        }

        this.getCandidates = function(srcset){

          var sources = srcset.split(',');
          for(var i = 0; i < sources.length; i++){
            var source = sources[i];
            var match = source.match(IMAGE_FRAGMENT_REGEXP);
            var desc = s.parseDesc(match[2]);

            var candidate = {
              src: match[1],
              w: desc.w,
              index: i
            };

            s.addCandidate( candidate );
          }
        }

        this.parseDesc = function(desc){
          var descriptors = desc.split(/\s/);
          var out = {};
          for (var i = 0; i < descriptors.length; i++) {
            var desc = descriptors[i];
            if (desc.length > 0) {
              var lastChar = desc.substr(desc.length - 1);
              var value = desc.substring(0, desc.length-1);
              var intVal = parseInt(value, 10);
              if (lastChar === 'w') {
                out[lastChar] = intVal;
              }
            }
          }
          return out;
        }

        //load the Candidates
        this.getCandidates(srcset);

        this.getBestCandidate = function(){

          var candidates = s.candidates.slice(0);

          //remove all candidates with widths less than requirements
          candidates = s.removeCandidatesIf( candidates, function(a) { return a.w < requirements.w; } );

          if( candidates.length == 0 ){
            //all images are too small. Return largest one
            return s.getBestCandidateIf( s.candidates, function(a,b) { return a.w > b.w; } );
          }

          //return candidate with smallest width
          return s.getBestCandidateIf( candidates, function(a, b) { return a.w <= b.w; } );
        }

        var bestCandidate = this.getBestCandidate();

        return bestCandidate;
      }

      this.setup = function() {

        if( _.isSizingImplemented() == true ){
          return false;
        }

        _.windowIsHighDensity = _.isHighDensity();
        _.bindResponsiveImages();
        _.loadResponsiveImages();

        _.w.bind('resize', function(){
          _.timer && clearTimeout(_.timer);
          _.timer = setTimeout(_.handleResizeEvent, 200);
        });

      }

      this.handleResizeEvent = function(event){
        _.windowWidth = _.w.width();
        _.windowIsHighDensity = _.isHighDensity();
        _.loadResponsiveImages();
      }

      this.bindResponsiveImages = function(selector){

        var $images = $('.responsive-image img',selector);

        //unbind anything there, so we can re-bind
        $images.unbind('load', _.handleImageLoadEvent);

        //bind load events
        $images.bind('load', _.handleImageLoadEvent);

      }
      this.handleImageLoadEvent = function(event){
        var $this = $(this);
        $this.unbind('load', _.handleImageLoadEvent);
        _.loadResponsiveImage($this.parent());
      }
      window.rebindResponsiveImages = function(selector){

        if( _.isSizingImplemented() == true ){
          return false;
        }

        _.bindResponsiveImages(selector);
        _.loadResponsiveImage(selector);
      }

      this.isHighDensity = function(){
        return ((window.matchMedia && (window.matchMedia('only screen and (min-resolution: 124dpx), only screen and (min-resolution: 1.3dppx), only screen and (min-resolution: 48.8dppx)').matches || window.matchMedia('only screen and (-webkit-min-device-pixel-ratio: 1.3), only screen and (-o-min-device-pixel-ratio: 2.6/2), only screen and (min--moz-device-pixel-ratio: 1.3), only screen and (min-device-pixel-ratio: 1.3)').matches)) || (window.devicePixelRatio && window.devicePixelRatio > 1.3));
      }

      this.loadResponsiveImage = function(image){

        if( typeof(image) == 'undefined' ){
          return;
        }

        var $image = $(image);
        var $img = $('img',image);

        var requirements = {
          w: ($image.parent().width() <= 0) ? _.windowWidth : $image.parent().width()
        };

        //detect if high density display. Multiply requirement by 1.5
        if(_.windowIsHighDensity){
          requirements.w = requirements.w * 1.5;
        }

        //setup srcset into data attribute and remove srcset to force overwrite of browser defaults
        if( !$img.attr('data-compat_srcset') ) {
          $img.attr('data-compat_srcset', $img.attr('srcset'));
          $img.attr('srcset','');
        }
        var srcset = $img.attr('data-compat_srcset');

        if (srcset) {
          var bestCandidate = _.getBestSource(requirements, srcset);

          if( $img.attr('src') != bestCandidate.src ){
            //change our image source to the best fit
            $img.attr("src",bestCandidate.src);
          }

        }
      }
      this._loadResponsiveImages = function(){
        $('.responsive-image').each(function(){
          _.loadResponsiveImage(this);
        });
      }

      this.loadResponsiveImages = function(){
        try {
          window.requestAnimationFrame( _._loadResponsiveImages() );
        }
        catch( err ){
          //fallback if requestanimationframe is unavailable
          _._loadResponsiveImages();
        }
      }

      this.isSizingImplemented = function() {
        var img = new Image();
        return img.sizes !== undefined;
      }

      _.setup();
    }();

  });

}(jQuery));
