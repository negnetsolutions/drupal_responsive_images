// Responsive Image Loader 2.0
// Negnet Solutions 2014
// GPL Licensed

(function ($, undefined) {

  var responsive_images = function(){
    var ticking = false;
    var timer;

    var _ = this;

    this.getBestSource = function( requirements, srcset ){
      var urlRegex = '[-a-zA-Z0-9@:%_+.~#?&//=]*';
      var imageFragmentRegex = '\\s*(' + urlRegex + ')\\s*([0-9xwh.\\s]*)';
      var srcsetRegex = '(' + imageFragmentRegex + ',?)+';

      var IMAGE_FRAGMENT_REGEXP = new RegExp(imageFragmentRegex);
      var SRCSET_REGEXP = new RegExp(srcsetRegex);
      var INT_REGEXP = /^[0-9]+$/;

      var s = this;
      this.candidates = new Array();

      this.addCandidate = function(candidate){
        s.candidates.push(candidate);
      }
      this.removeCandidatesIf = function(candidates, criteria){
        for( var i = candidates.length - 1; i >= 0; i--){
          var candidate = candidates[i];
          if( criteria(candidate) ){
            candidates.splice(i,1);
          }
        }
        return candidates;
      }
      this.getBestCandidateIf = function(candidates, criteria){
        var bestCandidate = candidates[0];

        for (var i = 0; i < candidates.length; i++) {
          var candidate = candidates[i];
          if (criteria(candidate, bestCandidate)) {
            bestCandidate = candidate;
          }
        }

        return bestCandidate;
      }

      this.getCandidates = function(srcset){
        var sources = srcset.split(',');
        for(var i = 0; i < sources.length; i++){
          var source = sources[i];
          var match = source.match(IMAGE_FRAGMENT_REGEXP);
          var desc = s.parseDesc(match[2]);

          var candidate = {
            src: match[1],
            x: desc.x,
            w: desc.w,
            h: desc.h
          };

          s.addCandidate( candidate );
        }

      }

      this.parseDesc = function(desc){
        var descriptors = desc.split(/\s/);
        var out = {};
        for (var i = 0; i < descriptors.length; i++) {
          var desc = descriptors[i];
          if (desc.length > 0) {
            var lastChar = desc.substr(desc.length - 1);
            var value = desc.substring(0, desc.length-1);
            var intVal = parseInt(value, 10);
            var floatVal = parseFloat(value);
            if (value.match(INT_REGEXP) && lastChar === 'w') {
              out[lastChar] = intVal;
            } else if (value.match(INT_REGEXP) && lastChar =='h') {
              out[lastChar] = intVal;
            } else if (!isNaN(floatVal) && lastChar == 'x') {
              out[lastChar] = floatVal;
            }
          }
        }
        return out;
      }

      this.getCandidates(srcset);

      this.getBestCandidate = function(){

        var candidates = s.candidates.slice(0);

        //remove all candidates with widths less than requirements
        candidates = s.removeCandidatesIf( candidates, function(a) { return a.w < requirements.w; } );

        if( candidates.length == 0 ){
          //all images are too small. Return largest one
          return s.getBestCandidateIf( s.candidates, function(a,b) { return a.w > b.w; } ).src;
        }

        //return candidate with smallest width
        return s.getBestCandidateIf( candidates, function(a, b) { return a.w < b.w; } ).src;
      }

      return this.getBestCandidate();

    }

    this.setup = function() {

      if( _.isSizingImplemented() == true ){
        return false;
      }

      _.loadResponsiveImages();

      $('.responsive-image img').bind('load', function() {
        _.loadResponsiveImage($(this).parent());
      });

      $(window).bind('resize', function(){
        _.loadResponsiveImages();
      });

    }
    this.isHighDensity = function(){
      return ((window.matchMedia && (window.matchMedia('only screen and (min-resolution: 124dpx), only screen and (min-resolution: 1.3dppx), only screen and (min-resolution: 48.8dppx)').matches || window.matchMedia('only screen and (-webkit-min-device-pixel-ratio: 1.3), only screen and (-o-min-device-pixel-ratio: 2.6/2), only screen and (min--moz-device-pixel-ratio: 1.3), only screen and (min-device-pixel-ratio: 1.3)').matches)) || (window.devicePixelRatio && window.devicePixelRatio > 1.3));
    }

    this.loadResponsiveImage = function(image){

      //setup data_src for each image element
      var data_src;

      var requirements = {
        w: ($(image).parent().width() <= 0) ? $(window).width() : $(image).parent().width()
      };

      //detect if high density display. Multiply requirement by 1.5
      if(_.isHighDensity()){
        requirements.w = requirements.w * 1.5;
      }

      //setup srcset into data attribute and remove srcset to force overwrite of browser defaults
      if( !$('img',image).attr('data-compat_srcset') ) {
        $('img',image).data('compat_srcset', $('img',image).attr('srcset'));
        $('img',image).attr('srcset','');
      }
      var srcset = $('img',image).data('compat_srcset');

      if (srcset) {
        data_src = _.getBestSource(requirements, srcset);

        if( $('img',image).attr('src') != data_src ){
          //change our image source to the best fit
          $('img',image).attr("src",data_src);
        }

      }
    }
    this._loadResponsiveImages = function(){
      $('.responsive-image').each(function(){
        try {
          window.requestAnimationFrame(_.loadResponsiveImage(this));
        }
        catch(err){
          //fallback if requestanimationframe is unavailable
          _.loadResponsiveImage(this);
        }
      });
      ticking = false;
    }

    this.loadResponsiveImages = function(){
      if(!ticking){
        timer && clearTimeout(timer);
        timer = setTimeout(_._loadResponsiveImages, 200);
        ticking = true;
      }
    }

    this.isSrcsetImplemented = function() {
      var img = new Image();
      return img.srcset !== undefined;
    }
    this.isSizingImplemented = function() {
      var img = new Image();
      return img.sizes !== undefined;
    }

    _.setup();
  }

  $(document).ready(function() {
    var rs = new responsive_images();
  });

}(jQuery));
